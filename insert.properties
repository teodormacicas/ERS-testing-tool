# server graph - the used graph on server
server.graph.source = <test>
server.graph.dest =   <test>

# switch this to 1 if you want to delete/create the graph in case of INSERT 
# NOTE: this operation will be done only by the first client!
server.graph.reset = 1

# if 1 it creates and restores the snapshot of the given graph 
# NOTE: it is NOT valid of INSERT
# NOTE2: currently IT IS NOT IMPLEMENTED! [do we really need this?]
server.graph.snapshot = 0

# allowed consistency levels: any, one, two, three, quorum, all 
server.read.consistency = quorum
server.write.consistency = quorum

# allowed granularity locking levels: e, ep, epv 
server.trans.locking.granularity = epv

# how many replicas for each item will be created 
server.replication.factor = 1

# turn on/off the check my writes consistency model
server.consistency.check_my_writes = on

# the name of input file containing triples
# NOTE: this file must apriori copied to the client working directory
#test.input.filename = 1k.nt

# number of times to repeat a test
test.num = 1

# thread num - number of threads per client
test.thread.num = 4

# warmup period - number of seconds before the statistics start to be collected
test.period.warmup = 10

# running period - number of seconds to run this test 
test.period.running = 120

# the type of operation that will be run during this test
# 0: insert
# NOTE: for the following operations, please be sure an insert test has been done apriori!!!
# 1: insert_link
# 2: update 
# 3: update_link 
# 4: delete 
# 5: delete_link 
# 6: entity_shallow_copy 
# 7: entity_deep_copy 
# 8: entity_full_delete
test.operation.type = 0

# how many operations per transactions are created and then run
test.operation.num = 1

# if flag set to 'no' each thread of each client would work with unconflicting data 
# if flag set to 'yes' the following properties are used to create conflicts
test.conflicts = yes

# define cardinality of different entities, properties per entities and values per property 
# used if you want to create conflicts 
# (no_clients*no_threads) / [e * (p.per.e) * (v.per.p)] = % probability of conflicts
test.num.diff.e = 100
test.num.diff.p.per.e = 500
test.num.diff.v.per.p = 200

# how many times a transaction is restarted in case it conflicts
test.transaction.retrials = 1
